# ... (–∏–º–ø–æ—Ä—Ç—ã, –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, BotService, lifespan) ...

# –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Å—Ç–∞–Ω—Ç
CONTACT_BUTTON_TEXT = "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
START_MESSAGE = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å."
NOT_FOUND_MESSAGE = "–ë–æ–Ω—É—Å—ã –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

@dp.message(F.text == "/start")
async def cmd_start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=CONTACT_BUTTON_TEXT, request_contact=True)]
        ],
        resize_keyboard=True
    )
    await message.answer(START_MESSAGE, reply_markup=keyboard)

@dp.message(F.contact)
async def handle_contact(message: types.Message):
    # --- –ü–†–û–í–ï–†–ö–ê: –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é ---
    if message.contact.user_id != message.from_user.id:
        await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

    phone_number = message.contact.phone_number
    user_id = message.from_user.id
    logger.info("Received contact from %s (user_id=%s)", phone_number, user_id)
    bot_service = app.state.bot_service
    
    # –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
    try:
        await bot_service.log_usage_stat(user_id=user_id, phone=phone_number, command="contact")
    except Exception as e: # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        logger.error(f"Failed to log usage stat for user {user_id}: {e}")

    try:
        guest_info = await bot_service.get_guest_bonus(phone_number)
    except Exception as e:
        logger.error(f"Failed to fetch bonus info for phone {phone_number} (user_id={user_id}): {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if not guest_info:
        await message.answer(NOT_FOUND_MESSAGE)
        return

    try:
        bonus_amount = int(float(guest_info['bonus_balances']))
    except (ValueError, TypeError) as e:
        logger.warning(f"Could not convert bonus_balances '{guest_info['bonus_balances']}' to int for user {user_id}: {e}")
        bonus_amount = 0

    response_text = (
        f"üëã {guest_info['first_name']}, —É –í–∞—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤ {bonus_amount} —Ä—É–±–ª–µ–π.\n"
        f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ‚Äî {guest_info['loyalty_level']}."
    )
    if bonus_amount > 0:
        response_text += f"\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –±–æ–Ω—É—Å–æ–≤: –¥–æ {guest_info['expire_date']}."

    try:
        await message.answer(response_text)
    except Exception as e:
        logger.error(f"Failed to send response to user {user_id}: {e}")
        # –í–∞–∂–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ—Ç–∞–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ FastAPI) ...

